Question : Convert a BST to a sorted circular doubly-linked list in-place. 
Think of the left and right pointers as synonymous to the previous and next 
pointers in a doubly-linked list.

So the task is to convert this into a doubly-linked list in place. 
The input to this function is the root node a node is defined as below

Class Node {
       int val;
       Node left;
       Node right;
}

I think the key issue here is in-place i.e. you cannot create a new tree 
(you cannot just traverse the tree, put the value into an array, sort it 
and then create a new tree ?)

For the above BST, the expected output is    
1 ---> 3 --> 4 --> 6 --> 7 --> 8 --> 10 --> 13 --> 14.  

All the arrows here is the right attribute (next) in the Node class, 
there is equivalent backward pointer (left) to the previous value


